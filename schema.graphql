enum Alignment {
  CE
  CG
  CN
  LE
  LG
  LN
  N
  NE
  NG
}

type Attributes {
  """Valor do atributo de carisma do jogador"""
  cha: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de carisma
  """
  chaSave: Boolean

  """Valor do atributo de constituição do jogador"""
  con: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de constituição
  """
  conSave: Boolean

  """Valor do atributo de destreza do jogador"""
  dex: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de destreza
  """
  dexSave: Boolean
  id: Int!

  """Valor do atributo de inteligência do jogador"""
  int: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de inteligência
  """
  intSave: Boolean
  playerId: Int!

  """Valor do atributo de força do jogador"""
  str: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de força
  """
  strSave: Boolean

  """Valor do atributo de sabedoria do jogador"""
  wis: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de sabedoria
  """
  wisSave: Boolean
}

enum Class {
  Barbarian1
  Barbarian2
  Bard1
  Bard2
  Cleric1
  Cleric2
  Cleric3
  Cleric4
  Cleric5
  Cleric6
  Cleric7
  Druid1
  Druid2
  Mage1
  Mage2
  Mage3
  Mage4
  Mage5
  Mage6
  Mage7
  Mage8
  Monk1
  Monk2
  Monk3
  Paladin1
  Paladin2
  Paladin3
  Ranger1
  Ranger2
  Rogue1
  Rogue2
  Rogue3
  Sorcerer1
  Sorcerer2
  Warlock1
  Warlock2
  Warlock3
  Warrior1
  Warrior2
  Warrior3
}

input CreateAttributesInput {
  cha: Int = 10
  chaSave: Boolean = false
  con: Int = 10
  conSave: Boolean = false
  dex: Int = 10
  dexSave: Boolean = false
  int: Int = 10
  intSave: Boolean = false
  str: Int = 10
  strSave: Boolean = false
  wis: Int = 10
  wisSave: Boolean = false
}

input CreateCurrencyInput {
  copper: Int = 0
  elektrum: Int = 0
  gold: Int = 0
  platinum: Int = 0
  silver: Int = 0
}

input CreateLanguagesInput {
  abyssal: Boolean = false
  celestial: Boolean = false
  common: Boolean = true
  deepSpeech: Boolean = false
  draconic: Boolean = false
  dwarvish: Boolean = false
  elvish: Boolean = false
  giant: Boolean = false
  gnomish: Boolean = false
  goblin: Boolean = false
  halfling: Boolean = false
  infernal: Boolean = false
  orc: Boolean = false
  primordial: Boolean = false
  sylvan: Boolean = false
  undercommon: Boolean = false
}

input CreatePlayerInput {
  age: Int!
  alignment: Alignment!
  armorClass: Int!
  class: Class!
  currentHitPoints: Int!
  currentTemporaryHitPoints: Int!
  hitPoints: Int!
  inspiration: Boolean!
  level: Int!
  movement: Float!
  name: String!
  playerImageUrl: String
  race: Race!
  size: Size!
  temporaryHitPoints: Int!
}

input CreateSkillsInput {
  acrobatics: Int = 0
  acrobaticsExp: Boolean = false
  acrobaticsProf: Boolean = false
  animalHandling: Int = 0
  animalHandlingExp: Boolean = false
  animalHandlingProf: Boolean = false
  arcana: Int = 0
  arcanaExp: Boolean = false
  arcanaProf: Boolean = false
  athletics: Int = 0
  athleticsExp: Boolean = false
  athleticsProf: Boolean = false
  deception: Int = 0
  deceptionExp: Boolean = false
  deceptionProf: Boolean = false
  history: Int = 0
  historyExp: Boolean = false
  historyProf: Boolean = false
  insight: Int = 0
  insightExp: Boolean = false
  insightProf: Boolean = false
  intimidation: Int = 0
  intimidationExp: Boolean = false
  intimidationProf: Boolean = false
  investigation: Int = 0
  investigationExp: Boolean = false
  investigationProf: Boolean = false
  medicine: Int = 0
  medicineExp: Boolean = false
  medicineProf: Boolean = false
  nature: Int = 0
  natureExp: Boolean = false
  natureProf: Boolean = false
  perception: Int = 0
  perceptionExp: Boolean = false
  perceptionProf: Boolean = false
  performance: Int = 0
  performanceExp: Boolean = false
  performanceProf: Boolean = false
  persuasion: Int = 0
  persuasionExp: Boolean = false
  persuasionProf: Boolean = false
  religion: Int = 0
  religionExp: Boolean = false
  religionProf: Boolean = false
  sleightOfHand: Int = 0
  sleightOfHandExp: Boolean = false
  sleightOfHandProf: Boolean = false
  stealth: Int = 0
  stealthExp: Boolean = false
  stealthProf: Boolean = false
  survival: Int = 0
  survivalExp: Boolean = false
  survivalProf: Boolean = false
}

type Currency {
  """Quantidade de moedas de cobre"""
  copper: Int!

  """Quantidade de moedas de elektrum"""
  elektrum: Int!

  """Quantidade de moedas de ouro"""
  gold: Int!
  id: Int!

  """Quantidade de moedas de platina"""
  platinum: Int!
  playerId: Int!

  """Quantidade de moedas de prata"""
  silver: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Language {
  """Boolean que determina se o jogador conhece o idioma abissal"""
  abyssal: Boolean

  """Boolean que determina se o jogador conhece o idioma celestial"""
  celestial: Boolean

  """Boolean que determina se o jogador conhece o idioma comum"""
  common: Boolean

  """Boolean que determina se o jogador conhece o idioma dialeto obscuro"""
  deepSpeech: Boolean

  """Boolean que determina se o jogador conhece o idioma dracônico"""
  draconic: Boolean

  """Boolean que determina se o jogador conhece o idioma anão"""
  dwarvish: Boolean

  """Boolean que determina se o jogador conhece o idioma élfico"""
  elvish: Boolean

  """Boolean que determina se o jogador conhece o idioma gigante"""
  giant: Boolean

  """Boolean que determina se o jogador conhece o idioma gnômico"""
  gnomish: Boolean

  """Boolean que determina se o jogador conhece o idioma goblin"""
  goblin: Boolean

  """Boolean que determina se o jogador conhece o idioma pequenino"""
  halfling: Boolean
  id: Int!

  """Boolean que determina se o jogador conhece o idioma infernal"""
  infernal: Boolean

  """Boolean que determina se o jogador conhece o idioma orc"""
  orc: Boolean
  playerId: Int!

  """Boolean que determina se o jogador conhece o idioma primordial"""
  primordial: Boolean

  """Boolean que determina se o jogador conhece o idioma silvestre"""
  sylvan: Boolean

  """Boolean que determina se o jogador conhece o idioma subcomum"""
  undercommon: Boolean
}

type Mutation {
  createDefaultPlayer(playerName: String!): Player!
  createPlayer(attributesPayload: CreateAttributesInput, currencyPayload: CreateCurrencyInput, languagesPayload: CreateLanguagesInput, playerPayload: CreatePlayerInput!, skillsPayload: CreateSkillsInput): Player!
}

type Player {
  """Alinhamento do Jogador"""
  alignment: Alignment!

  """AC do jogador"""
  armorClass: Int!
  attributes: Attributes

  """Classe do jogador"""
  class: Class!

  """Horário de criação do jogador"""
  createdAt: DateTime!
  currency: Currency

  """Pontos de vida atuais do jogador"""
  currentHitPoints: Int!

  """Pontos de vida temporários atuais do jogador"""
  currentTemporaryHitPoints: Int!

  """Pontos de vida do jogador"""
  hitPoints: Int!
  id: Int!

  """Campo de inspiração do jogador atual"""
  inspiration: Boolean!
  language: Language

  """Nível do jogador"""
  level: Int!

  """Deslocamento do jogador"""
  movement: Float!

  """Nome do jogador"""
  name: String!

  """Link da imagem de perfil do jogador"""
  playerImageUrl: String

  """Raça do jogador"""
  race: Race!

  """Classificação de tamanho do jogador"""
  size: Size!
  skills: Skills

  """Pontos de vida temporários do jogador"""
  temporaryHitPoints: Int!

  """Horário da última atualização do jogador"""
  updatedAt: DateTime!
}

type Query {
  getAllPlayers: [Player!]!
  getPlayerById(playerId: Float!): Player!
}

enum Race {
  Dragonkind1
  Dragonkind2
  Dragonkind3
  Dragonkind4
  Dragonkind5
  Dragonkind6
  Dragonkind7
  Dragonkind8
  Dragonkind9
  Dragonkind10
  Dwarf1
  Dwarf2
  Elf1
  Elf2
  Elf3
  Gnome1
  Gnome2
  HalfElf
  HalfOrc
  Halfling1
  Halfling2
  Human
  Tiefling
}

enum Size {
  Gargantuan
  Huge
  Large
  Medium
  Small
  Tiny
}

type Skills {
  """Modificador bônus da habilidade acrobacia"""
  acrobatics: Int!

  """Existência de expertise em acrobacia"""
  acrobaticsExp: Boolean!

  """Existência de proficiência em acrobacia"""
  acrobaticsProf: Boolean!

  """Modificador bônus da habilidade lidar com animais"""
  animalHandling: Int!

  """Existência de expertise em lidar com animais"""
  animalHandlingExp: Boolean!

  """Existência de proficiência em lidar com animais"""
  animalHandlingProf: Boolean!

  """Modificador bônus da habilidade arcanismo"""
  arcana: Int!

  """Existência de expertise em arcanismo"""
  arcanaExp: Boolean!

  """Existência de proficiência em arcanismo"""
  arcanaProf: Boolean!

  """Modificador bônus da habilidade atletismo"""
  athletics: Int!

  """Existência de expertise em atletismo"""
  athleticsExp: Boolean!

  """Existência de proficiência em atletismo"""
  athleticsProf: Boolean!

  """Modificador bônus da habilidade enganação"""
  deception: Int!

  """Existência de expertise em enganação"""
  deceptionExp: Boolean!

  """Existência de proficiência em enganação"""
  deceptionProf: Boolean!

  """Modificador bônus da habilidade história"""
  history: Int!

  """Existência de expertise em história"""
  historyExp: Boolean!

  """Existência de proficiência em história"""
  historyProf: Boolean!
  id: Int!

  """Modificador bônus da habilidade intuição"""
  insight: Int!

  """Existência de expertise em intuição"""
  insightExp: Boolean!

  """Existência de proficiência em intuição"""
  insightProf: Boolean!

  """Modificador bônus da habilidade intimidação"""
  intimidation: Int!

  """Existência de expertise em intimidação"""
  intimidationExp: Boolean!

  """Existência de proficiência em intimidação"""
  intimidationProf: Boolean!

  """Modificador bônus da habilidade investigação"""
  investigation: Int!

  """Existência de expertise em investigação"""
  investigationExp: Boolean!

  """Existência de proficiência em investigação"""
  investigationProf: Boolean!

  """Modificador bônus da habilidade medicina"""
  medicine: Int!

  """Existência de expertise em medicina"""
  medicineExp: Boolean!

  """Existência de proficiência em medicina"""
  medicineProf: Boolean!

  """Modificador bônus da habilidade natureza"""
  nature: Int!

  """Existência de expertise em natureza"""
  natureExp: Boolean!

  """Existência de proficiência em natureza"""
  natureProf: Boolean!

  """Modificador bônus da habilidade percepção"""
  perception: Int!

  """Existência de expertise em percepção"""
  perceptionExp: Boolean!

  """Existência de proficiência em percepção"""
  perceptionProf: Boolean!

  """Modificador bônus da habilidade atuação"""
  performance: Int!

  """Existência de expertise em atuação"""
  performanceExp: Boolean!

  """Existência de proficiência em atuação"""
  performanceProf: Boolean!

  """Modificador bônus da habilidade persuasão"""
  persuasion: Int!

  """Existência de expertise em persuasão"""
  persuasionExp: Boolean!

  """Existência de proficiência em persuasão"""
  persuasionProf: Boolean!
  playerId: Int!

  """Modificador bônus da habilidade religião"""
  religion: Int!

  """Existência de expertise em religião"""
  religionExp: Boolean!

  """Existência de proficiência em religião"""
  religionProf: Boolean!

  """Modificador bônus da habilidade prestidigitação"""
  sleightOfHand: Int!

  """Existência de expertise em prestidigitação"""
  sleightOfHandExp: Boolean!

  """Existência de proficiência em prestidigitação"""
  sleightOfHandProf: Boolean!

  """Modificador bônus da habilidade furtividade"""
  stealth: Int!

  """Existência de expertise em furtividade"""
  stealthExp: Boolean!

  """Existência de proficiência em furtividade"""
  stealthProf: Boolean!

  """Modificador bônus da habilidade sobrevivência"""
  survival: Int!

  """Existência de expertise em sobrevivência"""
  survivalExp: Boolean!

  """Existência de proficiência em sobrevivência"""
  survivalProf: Boolean!
}