enum Alignment {
  CE
  CG
  CN
  LE
  LG
  LN
  N
  NE
  NG
}

type Attributes {
  """Valor do atributo de carisma do jogador"""
  cha: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de carisma
  """
  chaSave: Boolean

  """Valor do atributo de constituição do jogador"""
  con: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de constituição
  """
  conSave: Boolean

  """Valor do atributo de destreza do jogador"""
  dex: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de destreza
  """
  dexSave: Boolean
  id: Int!

  """Valor do atributo de inteligência do jogador"""
  int: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de inteligência
  """
  intSave: Boolean
  playerId: Int!

  """Valor do atributo de força do jogador"""
  str: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de força
  """
  strSave: Boolean

  """Valor do atributo de sabedoria do jogador"""
  wis: Int!

  """
  Booleano que indica se jogador possui proficiência em salvaguarda de sabedoria
  """
  wisSave: Boolean
}

enum Class {
  Barbarian1
  Barbarian2
  Bard1
  Bard2
  Cleric1
  Cleric2
  Cleric3
  Cleric4
  Cleric5
  Cleric6
  Cleric7
  Druid1
  Druid2
  Mage1
  Mage2
  Mage3
  Mage4
  Mage5
  Mage6
  Mage7
  Mage8
  Monk1
  Monk2
  Monk3
  Paladin1
  Paladin2
  Paladin3
  Ranger1
  Ranger2
  Rogue1
  Rogue2
  Rogue3
  Sorcerer1
  Sorcerer2
  Warlock1
  Warlock2
  Warlock3
  Warrior1
  Warrior2
  Warrior3
}

input CreatePlayerInput {
  age: Int!
  alignment: Alignment!
  armorClass: Int!
  class: Class!
  currentHitPoints: Int!
  currentTemporaryHitPoints: Int!
  hitPoints: Int!
  inspiration: Boolean!
  movement: Float!
  name: String!
  playerImageUrl: String
  race: Race!
  size: Size!
  temporaryHitPoints: Int!
}

type Currency {
  """Quantidade de moedas de cobre"""
  copper: Int!

  """Quantidade de moedas de elektrum"""
  elektrum: Int!

  """Quantidade de moedas de ouro"""
  gold: Int!
  id: Int!

  """Quantidade de moedas de platina"""
  platinum: Int!
  playerId: Int!

  """Quantidade de moedas de prata"""
  silver: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Language {
  """Boolean que determina se o jogador conhece o idioma abissal"""
  abyssal: Boolean

  """Boolean que determina se o jogador conhece o idioma celestial"""
  celetial: Boolean

  """Boolean que determina se o jogador conhece o idioma comum"""
  common: Boolean

  """Boolean que determina se o jogador conhece o idioma dialeto obscuro"""
  deepSpeech: Boolean

  """Boolean que determina se o jogador conhece o idioma dracônico"""
  draconic: Boolean

  """Boolean que determina se o jogador conhece o idioma anão"""
  dwarvish: Boolean

  """Boolean que determina se o jogador conhece o idioma élfico"""
  elvish: Boolean

  """Boolean que determina se o jogador conhece o idioma gigante"""
  giant: Boolean

  """Boolean que determina se o jogador conhece o idioma gnômico"""
  gnomish: Boolean

  """Boolean que determina se o jogador conhece o idioma goblin"""
  goblin: Boolean

  """Boolean que determina se o jogador conhece o idioma pequenino"""
  halfling: Boolean
  id: Int!

  """Boolean que determina se o jogador conhece o idioma infernal"""
  infernal: Boolean

  """Boolean que determina se o jogador conhece o idioma orc"""
  orc: Boolean
  playerId: Int!

  """Boolean que determina se o jogador conhece o idioma primordial"""
  primordial: Boolean

  """Boolean que determina se o jogador conhece o idioma silvestre"""
  sylvan: Boolean

  """Boolean que determina se o jogador conhece o idioma subcomum"""
  undercommon: Boolean
}

type Mutation {
  createDefaultPlayer(playerName: String!): Player!
  createPlayer(payload: CreatePlayerInput!): Player!
}

type Player {
  """Alinhamento do Jogador"""
  alignment: Alignment!

  """AC do jogador"""
  armorClass: Int!
  attributes: Attributes

  """Classe do jogador"""
  class: Class!

  """Horário de criação do jogador"""
  createdAt: DateTime!
  currency: Currency

  """Pontos de vida atuais do jogador"""
  currentHitPoints: Int!

  """Pontos de vida temporários atuais do jogador"""
  currentTemporaryHitPoints: Int!

  """Pontos de vida do jogador"""
  hitPoints: Int!
  id: Int!

  """Campo de inspiração do jogador atual"""
  inspiration: Boolean!
  language: Language

  """Nível do jogador"""
  level: Int!

  """Deslocamento do jogador"""
  movement: Float!

  """Nome do jogador"""
  name: String!

  """Link da imagem de perfil do jogador"""
  playerImageUrl: String

  """Raça do jogador"""
  race: Race!

  """Classificação de tamanho do jogador"""
  size: Size!
  skills: Skills

  """Pontos de vida temporários do jogador"""
  temporaryHitPoints: Int!

  """Horário da última atualização do jogador"""
  updatedAt: DateTime!
}

type Query {
  getAllPlayers: [Player!]!
}

enum Race {
  Dragonkind1
  Dragonkind2
  Dragonkind3
  Dragonkind4
  Dragonkind5
  Dragonkind6
  Dragonkind7
  Dragonkind8
  Dragonkind9
  Dragonkind10
  Dwarf1
  Dwarf2
  Elf1
  Elf2
  Elf3
  Gnome1
  Gnome2
  HalfElf
  HalfOrc
  Halfling1
  Halfling2
  Human
  Tiefling
}

enum Size {
  Gargantuan
  Huge
  Large
  Medium
  Small
  Tiny
}

type Skills {
  """Modificador bônus da habilidade acrobacia"""
  acrobatics: Int

  """Modificador bônus da habilidade lidar com animais"""
  animalHandling: Int

  """Modificador bônus da habilidade arcana"""
  arcana: Int

  """Modificador bônus da habilidade atletismo"""
  athletics: Int

  """Modificador bônus da habilidade enganação"""
  deception: Int

  """Modificador bônus da habilidade história"""
  history: Int
  id: Int!

  """Modificador bônus da habilidade intuição"""
  insight: Int

  """Modificador bônus da habilidade intimidação"""
  intimidation: Int

  """Modificador bônus da habilidade investigação"""
  investigation: Int

  """Modificador bônus da habilidade medicina"""
  medicine: Int

  """Modificador bônus da habilidade natureza"""
  nature: Int

  """Modificador bônus da habilidade percepção"""
  perception: Int

  """Modificador bônus da habilidade atuação"""
  performance: Int

  """Modificador bônus da habilidade persuasão"""
  persuasion: Int
  playerId: Int!

  """Modificador bônus da habilidade religião"""
  religion: Int

  """Modificador bônus da habilidade prestidigitação"""
  sleightOfHand: Int

  """Modificador bônus da habilidade furtividade"""
  stealth: Int

  """Modificador bônus da habilidade sobrevivência"""
  survival: Int
}